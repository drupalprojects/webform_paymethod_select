<?php
/**
 * @file
 */

use \Drupal\webform_paymethod_select\WebformPaymentContext;
use \Drupal\webform_paymethod_select\PaymentRecurrentController;
use \Drupal\little_helpers\Webform\Submission;
use \Drupal\little_helpers\Webform\FormState;

if (module_exists('form_builder_webform') == TRUE) {
  require_once dirname(__FILE__) . '/webform_paymethod_select.form_builder.inc';
  require_once drupal_get_path('module', 'form_builder') . '/includes/form_builder.properties.inc';
}
require_once dirname(__FILE__) . '/webform_paymethod_select.line_item.inc';
require_once dirname(__FILE__) . '/webform_paymethod_select.webform.inc';

/**
 * Implements hook_webform_component_info().
 */
function webform_paymethod_select_webform_component_info() {
  $components['paymethod_select'] = array(
    'label'       => t('Payment Selector'),
    'description' => t('Provides a selectable list of payment methods for a webform.'),
    'features'    => array(
      'default_value' => FALSE,
      'required'      => TRUE,
    ),
    'file' => 'webform_paymethod_select.webform.inc',
  );

  return $components;
}


/**
 * Payment finish callback function specified as an argument to
 * the Payment constructor used for the paymethod_select component
 */
function webform_paymethod_select_payment_finish(Payment $payment) {
  switch ($payment->getStatus()->status) {
    case PAYMENT_STATUS_FAILED:
      // check if its a setup error
      // or
      // a payment processing error
      break;
    case PAYMENT_STATUS_SUCCESS:
      // redirect to thank you page
      //_webform_confirm_email_send_email($node->nid, $form_state['values']['details']['sid'], 3 /* type custom handler */);
      break;
    default:
  }
}

/**
 * Helper function to get a cleaned payment method controller name
 * this is necessary for controller names that include PHP namespaces
 */
function webform_paymethod_select_clean_name($controller_name) {
  return drupal_clean_css_identifier(
    $controller_name,
    array(
      ' ' => '-',
      '_' => '-',
      '/' => '-',
      '[' => '-',
      ']' => '',
      '\\' => '',
    )
  );
}

/**
 * Implements hook_element_info().
 */
function webform_paymethod_select_element_info() {
  // A payment method selection and configuration element. Every form this
  // element is used in should have a Payment object in $form_state['payment'].
  $elements['paymethod_select'] = array(
    '#input'            => TRUE,
    '#process'          => array('webform_paymethod_select_form_process'),
    '#element_validate' => array('webform_paymethod_select_form_process_validate'),
  );

  return $elements;
}

/**
 * helper function to preload all forms defined by the individual payment methods
 */
function _webform_paymethod_select_get_payment_method_form(&$element, &$form_state, $method_name, $pmid) {
  $payment = $form_state['payment'];

  $form_element_name = webform_paymethod_select_clean_name($payment->method->controller->name);

  $element['payment_method_all_forms'][$form_element_name] = array(
    '#type'        => 'fieldset',
    '#id'          => $form_element_name,
    '#title'       => t($method_name),
    '#attributes'  => array('class' => array('payment-method-form')),
    '#collapsible' => FALSE,
    '#collapsed'   => FALSE,
    '#states' => array(
      'visible' => array(
        '#payment-method-selector input' => array('value' => $pmid),
      ),
    ),
  );

  $form_elements_callback = $payment->method->controller->payment_configuration_form_elements_callback;
  if (function_exists($form_elements_callback) == TRUE) {
    $element['payment_method_all_forms'][$form_element_name] += call_user_func($form_elements_callback, $element['payment_method_all_forms'][$form_element_name], $form_state);
  }
}

/**
 * form process function that was set in hook_element_info().
 */
function webform_paymethod_select_form_process(array $element, array &$form_state, array &$form) {

  $payment          = $form_state['payment'];
  $element['#tree'] = TRUE;
  $pmid_options     = array();

  if (!empty($element['#selected_payment_methods'])) {
    $available_payment_methods = $payment->availablePaymentMethods(entity_load('payment_method', $element['#selected_payment_methods']));
    foreach ($available_payment_methods as $payment_method) {
      $pmid_options[(int) $payment_method->pmid] = check_plain($payment_method->title_generic);
    }
    $node = webform_paymethod_select_get_node($form, $form_state);
    $context = new WebformPaymentContext(new FormState($node, $form_state));
    drupal_alter(
      'webform_paymethod_select_method_list',
      $context,
      $available_payment_methods,
      $pmid_options
    );
  }

  $element['#prefix'] = '<div id="paymethod-select-wrapper">';
  $element['#suffix'] = '</div>';
  $element['payment_method_all_forms'] = array(
    '#type'        => 'container',
    '#id'          => 'payment-method-all-forms',
    '#weight'      => 2,
    '#attributes'  => array('class' => array('payment-method-all-forms')),
  );

  reset($pmid_options);

  switch (count($pmid_options)) {
    case 0:
      if (!$payment->pid) {
        $form['#disabled'] = TRUE;
      }
      $element['pmid_title'] = array(
        '#type'   => 'item',
        '#title'  => isset($element['#title']) ? $element['#title'] : NULL,
        '#markup' => t('There are no payment methods, check the options of this webform element to enable methods.'),
      );
      break;

    case 1:
      $pmid        = key($pmid_options);
      $method_name = current($pmid_options);
      if (($payment->method = entity_load_single('payment_method', $pmid)) == NULL) {
        break;
      }

      _webform_paymethod_select_get_payment_method_form($element, $form_state, $method_name, $pmid);

      break;

    default :
      $payment_method_options = array();
      $payment_method_default = isset($payment->method) ? $payment->method->pmid : key($pmid_options);

      foreach ($pmid_options as $pmid => $method_name) {
        if (($payment->method = entity_load_single('payment_method', $pmid)) == NULL) {
          continue;
        }

        $payment_method_options[$pmid] = t($method_name);

        _webform_paymethod_select_get_payment_method_form($element, $form_state, $method_name, $pmid);

        unset($payment->method);
      }

      $element['payment_method_selector'] = array(
        '#type'          => 'radios',
        '#id'            => 'payment-method-selector',
        '#weight'        => 1,
        '#title'         => isset($element['#title']) ? $element['#title'] : NULL,
        '#options'       => $payment_method_options,
        '#default_value' => $payment_method_default,
        '#required'      => $element['#required'],
        '#attributes'    => array('class' => array('paymethod-select-radios')),
      );
  }
  return $element;
}

/**
 * form validate callback that was set in hook_element_info().
 */
function webform_paymethod_select_form_process_validate(array $element, array &$form_state) {
  $payment = $form_state['payment'];
  $pmid    = (int) $element['#value']['payment_method_selector'];

  if (   empty($payment->method) == TRUE
      || $payment->method->pmid != $pmid) {
    $payment->method = entity_load_single('payment_method', $pmid);
    if ($payment->method->name === 'payment_method_unavailable') {
      throw new Exception(t('Invalid Payment Method selected.'));
    }
  }

  $selected_method = webform_paymethod_select_clean_name($payment->method->controller->name);

  $selected_method_validate_callback = $payment->method->controller->payment_configuration_form_elements_callback . '_validate';
  if (   function_exists($selected_method_validate_callback) == TRUE
      && !empty($element['payment_method_all_forms'][$selected_method])) {
    $selected_method_validate_callback(
      $element['payment_method_all_forms'][$selected_method],
      $form_state
    );
  }
}

/**
 * Helper function to get the current node object
 */
function webform_paymethod_select_get_node(&$form = NULL, &$form_state = NULL) {
  static $node = NULL;

  if ($node == NULL) {
    if (!empty($form['#node'])) {
      $node = $form['#node'];
    }
    elseif (!empty($form['nid']['#value'])) {
      $node = node_load($form['nid']['#value']);
    }
    elseif (isset($form_state['build_info']) && $form_state['build_info']['form_id'] == 'form_builder_field_configure') {
      $node = node_load($form_state['build_info']['args'][1]);
    }
    else {
      if (($node = menu_get_object()) == NULL) {
        $get = NULL;
        if (isset($_GET['destination']) == TRUE) {
          $get = $_GET['destination'];
        }
        elseif (isset($_GET['q']) == TRUE) {
          $get = $_GET['q'];
        }
        if (   $get != NULL
            && is_numeric(($nid = preg_replace('/^.*node\/(\d+)\/.*$/', '$1', $get))) == TRUE) {
          $node = node_load($nid);
        }
      }
    }
  }
  return $node;
}

/**
 * Helper function to create and add a payment object to the form_state
 */
function _webform_paymethod_select_set_payment(&$form_state, &$component = NULL) {

  $line_items          = array();
  $payment_description = t('Default Payment');
  $currency_code       = 'EUR';

  if ($component != NULL) {
    $line_items          = $component['extra']['line_items'];
    $payment_description = $component['extra']['payment_description'];
    $currency_code       = $component['extra']['currency_code'];
  }

  $payment = new Payment(
    array(
      'currency_code'   => $currency_code,
      'description'     => $payment_description,
      'finish_callback' => 'webform_paymethod_select_payment_finish',
    )
  );

  $payment->context_data['context'] = &$form_state['webform_context'];

  foreach ($line_items as $line_item) {
    $payment->setLineItem($line_item);
  }
  $form_state['payment'] = $payment;
}

/**
 * Implements hook_form_alter().
 *
 * We need to ensure a payment object is set in $form_state['payment']
 * This alters the form for forms used by form_builder_webform
 */
function webform_paymethod_select_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'form_builder_preview' && empty($form_state['payment']) == TRUE) {
    _webform_paymethod_select_set_payment($form_state);
  }
}

/**
 * Implements hook_form_<BASE form ID>_alter().
 *
 * We need to ensure a payment object is set in $form_state['payment']
 * This alters all webforms using the paymethod_select webform component
 */
function webform_paymethod_select_form_webform_client_form_alter(&$form, &$form_state, $form_id) {
  $node = webform_paymethod_select_get_node($form);

  if (isset($node) == TRUE && isset($node->webform['components']) == TRUE) {
    foreach($node->webform['components'] as $component) {
      if ($component['type'] == 'paymethod_select') {
        if (empty($form_state['payment']) == TRUE) {
          _webform_paymethod_select_set_payment($form_state, $component);
        }
        $form_state['payment']->context_data['context'] = $form_state['webform_context'];
        if (in_array('webform_paymethod_select_form_submit', $form['#submit']) == FALSE) {
          $form['#submit'][] = 'webform_paymethod_select_form_submit';
        }
        break;
      }
    }
  }
}

/**
 * form submit handler added in hook_form_alter for webforms containing
 * the paymethod_select webform component
 *
 * it's main purpose is to call the execute method of the payment object
 * (which in turn calls the execute method of the payment method controller)
 * that also saves the payment into the DB
 */
function webform_paymethod_select_form_submit($form, &$form_state) {
  if (   isset($form_state['payment']) == TRUE
      && (   isset($form_state['webform_completed']) == FALSE /*single page webform submit*/
          || $form_state['webform_completed']        == TRUE  /*multi page webform submit*/)) {

    $payment = &$form_state['payment'];
    $node    = webform_paymethod_select_get_node();

    $submission = Submission::load($node->nid, $form_state['values']['details']['sid']);
    $context = new WebformPaymentContext($submission);
    $context->methodData = $payment->method_data;
    $payment->context_data['context'] = $context;

    // handle setting the amount value in line items that were configured to
    // not have a fixed amount
    foreach ($payment->line_items as $line_item) {
      if ($line_item->amount_source === 'component') {
        $line_item->amount = (float) $submission->valueByCid($line_item->amount_component);
      }
    }
    entity_save('payment', $payment);

    // Execute the payment.
    if ($payment->getStatus()->status == PAYMENT_STATUS_NEW) {
      $payment->execute();
    }
  }
}

/**
 * Implements hook_webform_submission_presave().
 *
 * we need to serialize the submitted payment method form data
 * in order to have a saved submission
 */
function webform_paymethod_select_webform_submission_presave($node, &$submission) {
  foreach($node->webform['components'] as $cid => $component) {
    if ($component['type'] == 'paymethod_select') {
      $flatten = &$submission->data[$cid]['value'];
      unset($submission->data[$cid]['value']);
      $submission->data[$cid]['value'][0] = serialize($flatten);
      break;
    }
  }
}
/**
 * Implements hook_webform_submission_insert().
 *
 * our only chance to create a connection between payment and
 * webform submission; we save the submission ID in the node
 * object and fetch it later to safe into the context
 */
function webform_paymethod_select_webform_submission_insert($node, $submission) {
  foreach($node->webform['components'] as $cid => $component) {
    if ($component['type'] == 'paymethod_select') {
      $node->webform['sid'] = $submission->sid;
      break;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Implements hook_form_form_builder_webform_save_form_alter().
 */
function webform_paymethod_select_form_form_builder_webform_save_form_alter(&$form, &$form_state) {
  $form['#attached']['js'][] = '/misc/ajax.js';
  $form['#attached']['js'][] = '/misc/states.js';
}
