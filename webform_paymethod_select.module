<?php
/**
 * @file
 */

use \Drupal\webform_paymethod_select\WebformPaymentContext;
use \Drupal\webform_paymethod_select\PaymentRecurrentController;
use \Drupal\webform_paymethod_select\Component;
use \Drupal\little_helpers\Webform\Submission;
use \Drupal\little_helpers\Webform\FormState;
use \Drupal\little_helpers\Webform\Webform;
use \Drupal\payment_forms\PaymentContextInterface;

if (module_exists('form_builder_webform') == TRUE) {
  require_once dirname(__FILE__) . '/webform_paymethod_select.form_builder.inc';
  require_once drupal_get_path('module', 'form_builder') . '/includes/form_builder.properties.inc';
}
require_once dirname(__FILE__) . '/webform_paymethod_select.line_item.inc';
require_once dirname(__FILE__) . '/webform_paymethod_select.webform.inc';

/**
 * Implements hook_menu().
 */
function webform_paymethod_select_menu() {
  $menu['webform-payment/error/%entity_object'] = array(
    'title' => 'Payment failed or cancelled',
    'load arguments' => array('payment'),
    'page arguments' => array(2),
    'page callback' => 'webform_paymethod_select_error_page',
    'type' => MENU_CALLBACK,
    'file' => 'webform_paymethod_select.pages.inc',
    'access callback' => 'webform_paymethod_select_payment_access',
    'access arguments' => array(2),
  );
  return $menu;
}

function webform_paymethod_select_hmac(\Payment $payment) {
  return drupal_hmac_base64($payment->pid, drupal_get_hash_salt() . 'webform_paymethod_select');
}

function webform_paymethod_select_payment_access(\Payment $payment) {
  return isset($_GET['wpst']) && $_GET['wpst'] == webform_paymethod_select_hmac($payment);
}

/**
 * Implements hook_theme().
 */
function webform_paymethod_select_theme() {
  $hooks['webform_paymethod_select_placeholder'] = array(
    'render element' => 'element',
    'file' => 'webform_paymethod_select.theme.inc',
  );
  return $hooks;
}

/**
 * Implements hook_webform_component_info().
 */
function webform_paymethod_select_webform_component_info() {
  $components['paymethod_select'] = array(
    'label'       => t('Payment Selector'),
    'description' => t('Provides a selectable list of payment methods for a webform.'),
    'features'    => array(
      'default_value' => FALSE,
      'required'      => TRUE,
      'csv'           => FALSE,
    ),
    'file' => 'webform_paymethod_select.webform.inc',
  );

  return $components;
}


/**
 * Payment finish callback function specified as an argument to
 * the Payment constructor used for the paymethod_select component
 */
function webform_paymethod_select_payment_finish(Payment $payment) {
  $status = $payment->getStatus()->status;
  $context = $payment->context_data['context'];
  if (payment_status_is_or_has_ancestor($status, PAYMENT_STATUS_SUCCESS)) {
    $context->statusSuccess($payment);
  }
  elseif (payment_status_is_or_has_ancestor($status, PAYMENT_STATUS_PENDING)) {
    return;
  }
  else {
    $context->redirectToStatus($payment);
  }
}

/**
 * Helper function to get a cleaned payment method controller name
 * this is necessary for controller names that include PHP namespaces
 */
function webform_paymethod_select_clean_name($controller_name) {
  return drupal_clean_css_identifier(
    $controller_name,
    array(
      ' ' => '-',
      '_' => '-',
      '/' => '-',
      '[' => '-',
      ']' => '',
      '\\' => '',
    )
  );
}

/**
 * Element validate function for our webform component.
 */
function webform_paymethod_select_component_element_validate(array $element, array &$form_state) {
  $component = $form_state['webform_paymethod_select'][$element['#cid']];
  $component->validate($element, $form_state);

}

/**
 * Helper function to get the current node object
 */
function webform_paymethod_select_get_node(&$form = NULL, &$form_state = NULL) {
  static $node = NULL;

  if ($node == NULL) {
    if (!empty($form['#node'])) {
      $node = $form['#node'];
    }
    elseif (!empty($form['nid']['#value'])) {
      $node = node_load($form['nid']['#value']);
    }
    elseif (isset($form_state['build_info']) && $form_state['build_info']['form_id'] == 'form_builder_field_configure') {
      $node = node_load($form_state['build_info']['args'][1]);
    }
    elseif (isset($form['#form_builder']) && $form['#form_builder']['form_type'] == 'webform') {
      $node = node_load($form['#form_builder']['form_id']);
    }
    else {
      if (($node = menu_get_object()) == NULL) {
        $get = NULL;
        if (isset($_GET['destination']) == TRUE) {
          $get = $_GET['destination'];
        }
        elseif (isset($_GET['q']) == TRUE) {
          $get = $_GET['q'];
        }
        if (   $get != NULL
            && is_numeric(($nid = preg_replace('/^.*node\/(\d+)\/.*$/', '$1', $get))) == TRUE) {
          $node = node_load($nid);
        }
      }
    }
  }
  return $node;
}

/**
 * Implements hook_form_<BASE form ID>_alter().
 *
 * We need to ensure a payment object is set in $form_state['payment']
 * This alters all webforms using the paymethod_select webform component
 */
function webform_paymethod_select_form_webform_client_form_alter(&$form, &$form_state, $form_id) {
  $webform = new Webform($form['#node']);
  $components = $webform->componentsByType('paymethod_select');
  if (count($components)) {
    $form['#submit'][] = 'webform_paymethod_select_form_submit';
  }
  foreach ($components as $cid => $component) {
    if ($component['page_num'] == $form_state['webform']['page_num']) {
      $parents = array($component['form_key']);
      $parent = $component;
      while ($parent['pid'] != 0) {
        $parent = $components[$parent['pid']];
        array_unshift($parents, $parent['form_key']);
      }
      $componentObj = &$form_state['webform_paymethod_select'][$cid];
      if (!$componentObj) {
        $componentObj = new Component($component);
      }
      $element = &drupal_array_get_nested_value($form['submitted'], $parents);
      $componentObj->render($element, $form, $form_state);
    }
  }
}

/**
 * form submit handler added in hook_form_webform_client_form_alter() containing
 * the paymethod_select webform component
 *
 * it's main purpose is to call the execute method of the payment object
 * (which in turn calls the execute method of the payment method controller)
 * that also saves the payment into the DB
 */
function webform_paymethod_select_form_submit($form, &$form_state) {
  if (!empty($form_state['webform_completed'])) {
    foreach ($form_state['webform_paymethod_select'] as $cid => $component) {
      $component->submit($form, $form_state);
    }
  }
}

/**
 * Implements hook_webform_submission_presave().
 *
 * We don't want to save sensitive payment information.
 */
function webform_paymethod_select_webform_submission_presave($node, &$submission) {
  $webform = new Webform($node);
  foreach(array_keys($webform->componentsByType('paymethod_select')) as $cid) {
    $submission->data[$cid]['value'] = array("no payment data here");
  }
}

/**
 * Implements hook_FORM_ID_alter().
 * Implements hook_form_form_builder_field_configure_alter().
 *
 * Generate a list of all available components that might be used as amount_source
 * and make it available for @see webform_paymethod_select_element_process_line_item().
 */
function webform_paymethod_select_form_form_builder_field_configure_alter(&$form, &$form_state) {
  if ($form['#_edit_element']['#form_builder']['element_type'] != 'paymethod_select') {
    return;
  }

  $element = &$form['#_edit_element'];
  $build_info = &$form_state['build_info'];
  $other_components = NULL;
  if ($build_info['form_id'] == 'form_builder_field_configure') {
    $cache = form_builder_cache_load($build_info['args'][0], $build_info['args'][1]);
    $cache['#depth'] = -1;
    $felements[] = &$cache;
    $other_components = array();
    while (!empty($felements)) {
      $felem = array_shift($felements);
      foreach (array_reverse(element_children($felem, TRUE)) as $key) {
        $felem[$key]['#depth'] = $felem['#depth'] + 1;
        array_unshift($felements, $felem[$key]);
      }
      if (!empty($felem['#form_builder']) && $felem['#form_builder']['element_id'] != $element['#form_builder']['element_id']) {
        $other_components[$felem['#form_builder']['element_id']] = str_repeat('-', $felem['#depth']) . ' ' . $felem['#title'];
      }
    }
  }
  $form_state['payment_line_item_other_components'] = $other_components;
}

/**
 * Implements hook_node_presave().
 *
 * Transform form_builder-element_id's in ->amount_component
 * into webform component IDs.
 */
function webform_paymethod_select_node_presave($node) {
  if (!module_exists('form_builder_webform') || !isset($node->webform) || !isset($node->nid)) {
    return;
  }
  require_once drupal_get_path('module', 'form_builder') . '/includes/form_builder.cache.inc';
  if (!($cache = form_builder_cache_load('webform', $node->nid))) {
    return;
  }

  $webform = new Webform($node);
  foreach ($webform->componentsByType('paymethod_select') as $component) {
    // The items sub-array is only present if the component has been edited.
    if (!isset($component['extra']['line_items']['items'])) {
      continue;
    }
    foreach ($component['extra']['line_items']['items'] as $item) {
      if (!empty($item->amount_component) && !is_numeric($item->amount_component)) {
        if (strpos($item->amount_component, 'cid_') === 0) {
          $item->amount_component = (int) substr($item->amount_component, 4);
        }
        elseif (strpos($item->amount_component, 'new_') === 0) {
          $element = form_builder_get_element($cache, $item->amount_component);
          $item->amount_component = $element['#webform_component']['cid'];
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Implements hook_form_form_builder_webform_save_form_alter().
 */
function webform_paymethod_select_form_form_builder_webform_save_form_alter(&$form, &$form_state) {
  $form['#attached']['js'][] = 'misc/ajax.js';
  $form['#attached']['js'][] = 'misc/states.js';
}
