<?php
/**
 * @file
 */

interface PaymentRecurrentController {
}

/**
 * Implements hook_webform_component_info().
 */
function webform_paymethod_select_webform_component_info() {
  $components['paymethod_select'] = array(
    'label'       => t('Payment Selector'),
    'description' => t('Provides a selectable list of payment methods for a webform.'),
    'features'    => array(
      'default_value' => FALSE,
      'required'      => TRUE,
    ),
    'file' => 'webform_paymethod_select.webform.inc',
  );

  return $components;
}


/**
 * Payment finish callback function specified as an argument to
 * the Payment constructor used for the paymethod_select component
 */
function webform_paymethod_select_payment_finish(Payment $payment) {
  switch ($payment->getStatus()->status) {
    case PAYMENT_STATUS_FAILED:
      // check if its a setup error
      // or
      // a payment processing error
      break;
    case PAYMENT_STATUS_SUCCESS:
      // redirect to thank you page
      //_webform_confirm_email_send_email($node->nid, $form_state['values']['details']['sid'], 3 /* type custom handler */);
      break;
    default:
  }
}

/**
 * Helper function to get a cleaned payment method controller name
 * this is necessary for controller names that include PHP namespaces
 */
function webform_paymethod_select_clean_name($controller_name) {
  return drupal_clean_css_identifier(
    $controller_name,
    array(
      ' ' => '-',
      '_' => '-',
      '/' => '-',
      '[' => '-',
      ']' => '',
      '\\' => '',
    )
  );
}

/**
 * Implements hook_element_info().
 */
function webform_paymethod_select_element_info() {
  // A payment method selection and configuration element. Every form this
  // element is used in should have a Payment object in $form_state['payment'].
  $elements['paymethod_select'] = array(
    '#input'            => TRUE,
    '#process'          => array('webform_paymethod_select_form_process'),
    '#element_validate' => array('webform_paymethod_select_form_process_validate'),
  );

  return $elements;
}

/**
 * helper function to preload all forms defined by the individual payment methods
 */
function _webform_paymethod_select_get_payment_method_form(&$element, &$form_state, $method_name, $pmid) {
  $payment = $form_state['payment'];

  $form_element_name = webform_paymethod_select_clean_name($payment->method->controller->name);

  $element['payment_method_all_forms'][$form_element_name] = array(
    '#type'        => 'fieldset',
    '#id'          => $form_element_name,
    '#title'       => t($method_name),
    '#attributes'  => array('class' => array('payment-method-form')),
    '#collapsible' => FALSE,
    '#collapsed'   => FALSE,
    '#states' => array(
      'visible' => array(
        '#payment-method-selector input' => array('value' => $pmid),
      ),
    ),
  );

  $form_elements_callback = $payment->method->controller->payment_configuration_form_elements_callback;
  if (function_exists($form_elements_callback) == TRUE) {
    $element['payment_method_all_forms'][$form_element_name] += call_user_func($form_elements_callback, $element['payment_method_all_forms'][$form_element_name], $form_state);
  }
}

/**
 * form process function that was set in hook_element_info().
 */
function webform_paymethod_select_form_process(array $element, array &$form_state, array &$form) {

  $payment          = $form_state['payment'];
  $element['#tree'] = TRUE;
  $recurrent        = $payment->context_data['context']->isRecurrent;              ;
  $pmid_options     = array();

  if (!empty($element['#selected_payment_methods'])) {
    foreach ($payment->availablePaymentMethods(entity_load('payment_method', $element['#selected_payment_methods'])) as $payment_method) {
      if (!$recurrent || $payment_method->controller instanceof PaymentRecurrentController) {
        $pmid_options[(int) $payment_method->pmid] = check_plain($payment_method->title_generic);
      }
    }
  }

  $element['#prefix'] = '<div id="paymethod-select-wrapper">';
  $element['#suffix'] = '</div>';
  $element['payment_method_all_forms'] = array(
    '#type'        => 'container',
    '#id'          => 'payment-method-all-forms',
    '#weight'      => 2,
    '#attributes'  => array('class' => array('payment-method-all-forms')),
  );

  reset($pmid_options);

  switch (count($pmid_options)) {
    case 0:
      if (!$payment->pid) {
        $form['#disabled'] = TRUE;
      }
      $element['pmid_title'] = array(
        '#type'   => 'item',
        '#title'  => isset($element['#title']) ? $element['#title'] : NULL,
        '#markup' => t('There are no payment methods, check the options of this webform element to enable methods.'),
      );
      break;

    case 1:
      $pmid        = key($pmid_options);
      $method_name = current($pmid_options);
      if (($payment->method = entity_load_single('payment_method', $pmid)) == NULL) {
        break;
      }

      _webform_paymethod_select_get_payment_method_form($element, $form_state, $method_name, $pmid);

      break;

    default :
      $payment_method_options = array();
      $payment_method_default = isset($payment->method) ? $payment->method->pmid : key($pmid_options);

      foreach ($pmid_options as $pmid => $method_name) {
        if (($payment->method = entity_load_single('payment_method', $pmid)) == NULL) {
          continue;
        }

        $payment_method_options[$pmid] = t($method_name);

        _webform_paymethod_select_get_payment_method_form($element, $form_state, $method_name, $pmid);

        unset($payment->method);
      }

      $element['payment_method_selector'] = array(
        '#type'          => 'radios',
        '#id'            => 'payment-method-selector',
        '#weight'        => 1,
        '#title'         => isset($element['#title']) ? $element['#title'] : NULL,
        '#options'       => $payment_method_options,
        '#default_value' => $payment_method_default,
        '#required'      => $element['#required'],
        '#attributes'    => array('class' => array('paymethod-select-radios')),
      );
  }
  return $element;
}

/**
 * form validate callback that was set in hook_element_info().
 */
function webform_paymethod_select_form_process_validate(array $element, array &$form_state) {
  $payment = $form_state['payment'];
  $pmid    = (int) $element['#value']['payment_method_selector'];

  if (   empty($payment->method) == TRUE
      || $payment->method->pmid != $pmid) {
    $payment->method = entity_load_single('payment_method', $pmid);
    if ($payment->method->name === 'payment_method_unavailable') {
      throw new Exception(t('Invalid Payment Method selected.'));
    }
  }

  $selected_method = webform_paymethod_select_clean_name($payment->method->controller->name);

  $selected_method_validate_callback = $payment->method->controller->payment_configuration_form_elements_callback . '_validate';
  if (   function_exists($selected_method_validate_callback) == TRUE
      && !empty($element['payment_method_all_forms'][$selected_method])) {
    $selected_method_validate_callback(
      $element['payment_method_all_forms'][$selected_method],
      $form_state
    );
  }
}

/**
 * Helper function to get the current node object
 */
function webform_paymethod_select_get_node(&$form = NULL) {
  static $node = NULL;

  if ($node == NULL) {
    if (!empty($form['#node'])) {
      $node = $form['#node'];
    }
    elseif (!empty($form['nid']['#value'])) {
      $node = node_load($form['nid']['#value']);
    }
    else {
      if (($node = menu_get_object()) == NULL) {
        $get = NULL;
        if (isset($_GET['destination']) == TRUE) {
          $get = $_GET['destination'];
        }
        elseif (isset($_GET['q']) == TRUE) {
          $get = $_GET['q'];
        }
        if (   $get != NULL
            && is_numeric(($nid = preg_replace('/^.*node\/(\d+)\/.*$/', '$1', $get))) == TRUE) {
          $node = node_load($nid);
        }
      }
    }
  }
  return $node;
}

/**
 * Helper function to create and add a payment object to the form_state
 */
function _webform_paymethod_select_set_payment(&$form_state, &$component = NULL) {

  $line_items          = array();
  $payment_description = t('Default Payment');
  $currency_code       = 'EUR';

  if ($component != NULL) {
    $line_items          = $component['extra']['line_items'];
    $payment_description = $component['extra']['payment_description'];
    $currency_code       = $component['extra']['currency_code'];
  }

  $payment = new Payment(
    array(
      'currency_code'   => $currency_code,
      'description'     => $payment_description,
      'finish_callback' => 'webform_paymethod_select_payment_finish',
    )
  );

  $payment->context_data['context'] = &$form_state['webform_context'];

  foreach ($line_items as $line_item) {
    $payment->setLineItem($line_item);
  }
  $form_state['payment'] = $payment;
}

/**
 * Implements hook_form_<BASE form ID>_alter().
 *
 * We need to ensure a payment object is set in $form_state['payment']
 * This alters all webforms using the paymethod_select webform component
 */
function webform_paymethod_select_form_webform_client_form_alter(&$form, &$form_state, $form_id) {
  $node = webform_paymethod_select_get_node($form);

  if (isset($node) == TRUE && isset($node->webform['components']) == TRUE) {
    foreach($node->webform['components'] as $component) {
      if ($component['type'] == 'paymethod_select') {
        if (empty($form_state['webform_context']) == TRUE) {
          $form_state['webform_context'] = new \Drupal\webform_paymethod_select\WebformPaymentContext($node, $form_state);
        }
        if (empty($form_state['payment']) == TRUE) {
          _webform_paymethod_select_set_payment($form_state, $component);
        }
        if (in_array('webform_paymethod_select_form_submit', $form['#submit']) == FALSE) {
          $form['#submit'][] = 'webform_paymethod_select_form_submit';
        }
        break;
      }
    }
  }
}

/**
 * form submit handler added in hook_form_alter for webforms containing
 * the paymethod_select webform component
 *
 * it's main purpose is to call the execute method of the payment object
 * (which in turn calls the execute method of the payment method controller)
 * that also saves the payment into the DB
 */
function webform_paymethod_select_form_submit($form, &$form_state) {
  if (   isset($form_state['payment']) == TRUE
      && (   isset($form_state['webform_completed']) == FALSE /*single page webform submit*/
          || $form_state['webform_completed']        == TRUE  /*multi page webform submit*/)) {

    $payment      = &$form_state['payment'];
    $node         = webform_paymethod_select_get_node();
    $context      = &$payment->context_data['context'];
    $context->sid = $context->node->webform['sid'];

    // handle setting the amount value in line items that were configured to
    // not have a fixed amount
    foreach ($payment->line_items as $line_item) {
      if ($line_item->component_or_fixed == 'component') {
        $line_item->amount = (float) $context->valueByKey($line_item->amount_component);
      }
    }
    // before saving the payment the class of the context is changed to
    // WebformSubmission as we need this type later when loading a alread
    // saved payment; the WebformPaymentContext class can't handle saved
    // webform submissions
    $payment->context_data['context'] = \Drupal\little_helpers\WebformSubmission::load($context->node->nid, $context->sid);
    entity_save('payment', $payment);

    // Execute the payment.
    if ($payment->getStatus()->status == PAYMENT_STATUS_NEW) {
      $payment->execute();
    }
  }
}

/**
 * Implements hook_webform_submission_presave().
 *
 * we need to serialize the submitted payment method form data
 * in order to have a saved submission
 */
function webform_paymethod_select_webform_submission_presave($node, &$submission) {
  foreach($node->webform['components'] as $cid => $component) {
    if ($component['type'] == 'paymethod_select') {
      $flatten = &$submission->data[$cid]['value'];
      unset($submission->data[$cid]['value']);
      $submission->data[$cid]['value'][0] = serialize($flatten);
      break;
    }
  }
}
/**
 * Implements hook_webform_submission_insert().
 *
 * our only chance to create a connection between payment and
 * webform submission; we save the submission ID in the node
 * object and fetch it later to safe into the context
 */
function webform_paymethod_select_webform_submission_insert($node, $submission) {
  foreach($node->webform['components'] as $cid => $component) {
    if ($component['type'] == 'paymethod_select') {
      $node->webform['sid'] = $submission->sid;
      break;
    }
  }
}

/**
 * Implements hook_element_info_alter().
 */
function webform_paymethod_select_element_info_alter(&$element) {
  if (isset($element['payment_line_item']) == TRUE) {
    $element['payment_line_item']['#process'][]        = 'webform_paymethod_select_element_process_line_item';
    $element['payment_line_item']['#element_validate'] = array('webform_paymethod_select_element_valditate_line_item');
  }
}

/**
 * Callback function set in hook_element_info_alter() hook
 */
function webform_paymethod_select_element_process_line_item(array $element, array &$form_state, array $form) {
  $node = node_load($form['nid']['#value']);
  $webform_component_list = webform_component_list($node, FALSE);

  foreach ($webform_component_list as $cid => $component) {
    if ($node->webform['components'][$cid]['type'] == 'paymethod_select') {
      unset($webform_component_list[$cid]);
    }
  }

  foreach($element as $key => &$value) {

    if (strpos($key, 'container_') === 0) {
      $index = str_replace('container_', '', $key);
      $defaults = NULL;
      if (   isset($element['#default_value'][$index]) == TRUE
        && is_object($element['#default_value'][$index]) == TRUE) {
        $defaults = $element['#default_value'][$index];
      }
      else {
        $defaults = new Drupal\webform_paymethod_select\PaymethodLineItem(array());
      }

      $defaults->amount = ($defaults->amount == 0) ? '' : $defaults->amount;

      $value = array(
        'component_or_fixed' => array(
          '#title'         => t('Choose how to set the amount for the line item(s)'),
          '#type'          => 'radios',
          '#default_value' => $defaults->component_or_fixed,
          '#description'   => t('You can select the webform component from which to read the amount or specify a fixed value here.'),
          '#options'       => array(
            'fixed'  => t('Set fixed amount'),
            'component' => t('Select the component of this webform from which to read the amount'),
          ),
        ),
      ) + $value;

      $value['amount'] = array(
        '#type' => 'textfield',
        '#title' => t('Amount'),
        '#required' => FALSE,
        '#default_value' => $defaults->amount,
      );
      $value['amount_component'] = array(
        '#type' => 'select',
        '#default_value' => $defaults->amount_component,
        '#options' => empty($webform_component_list) ? array('' => t('No available components')) : $webform_component_list,
        '#disabled' => empty($webform_component_list) ? TRUE : FALSE,
      );
    }
  }

  return $element;
}

/**
 * Callback function set in hook_element_info_alter() hook
 */
function webform_paymethod_select_element_valditate_line_item(array $element, array &$form_state) {

  $values = drupal_array_get_nested_value($form_state['values'], $element['#parents']);

  // Don't let the submit button's value be validated.
  unset($values['add_more']);
  $line_items = array();
  foreach ($values as $container => $line_item_data) {
    // ignore empty line items
    if ($line_item_data['quantity'] === '' || $line_item_data['tax_rate'] === '') {
      continue;
    }
    // They're not all empty, so make sure they all contain input.
    else {
      $errors = array_fill_keys(array_keys($element['#value']), FALSE);
      foreach ($line_item_data as $property => $value) {
        if ($property != 'amount' && !strlen($value)) {
          form_error($element[$container][$property], t('%title is required, or leave all fields for this line item empty.', array(
            '%title' => $element[$container][$property]['#title'],
          )));
        }
      }
    }

    // Validate quantity.
    if (preg_match('#\D#', $line_item_data['quantity'])) {
      form_error($element[$container]['quantity'], t('Quantity should be a positive integer.'));
    }

    // Validate tax rate.
    $tax_rate = str_replace(',', '.', $line_item_data['tax_rate']);
    if (!is_numeric($tax_rate) || $tax_rate < 0) {
      form_error($element, t('Tax rate must be a positive percentage.'));
    }
    else {
      $line_item_data['tax_rate'] = $tax_rate / 100;
    }

    // Convert the raw input to a PaymentLineItem object.
    $line_item_data['amount'] = (float) $line_item_data['amount'];
    $line_item_data['quantity'] = (int) $line_item_data['quantity'];
    $line_item_data['tax_rate'] = (float) $line_item_data['tax_rate'];
    $line_items[] = new Drupal\webform_paymethod_select\PaymethodLineItem($line_item_data);
  }
  form_set_value($element, $line_items, $form_state);
}